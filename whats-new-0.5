What's new in Blogstrap 0.5?
----------------------------------

There have been some changes recently in Blogstrap, enough to warrant
a new version number. Here are the major modifications:


* **Replacing Strapdown.js with Strapdown-Zeta**. Strapdown.js has
  been unmaintained for a long time. Some people have forked it and
  created Strapdown-Zeta which is still actively maintained. Moving to
  the new modern script gives us some nice features instantly, like a
  client-side theme picker or better SEO integration. It also feels
  like there are more themes than its predecessor and it may be just
  me, but the themes look updated and slightly better.

* **Overshadow** a new feature that allows to serve different content
  between the markdown and the html version, by providing both a
  `*.md` and `*.html`. The client is still in charge of requesting the
  proper MIME type, but the blog publisher can now better control what
  they get.

* **A new CLI subparser** you can now run Blogstrap on the Flask
  development server by running the command `blogstrap run`. It takes
  an optional argument to a config file, and will serve the files in
  the current directory.

* **New default directory structure**. Instead of creating all its
  files, and a directory to hold articles, `blogstrap init` now will
  only generate its files in a `.blogstrap` directory by default. The
  hidden directory will not be served by the app server, and can now
  live safely along other hidden directories (like your .git) without
  fear of http access to them. Note that the default directory
  structure only affects the layout generated by `blogstrap init`, but
  it shouldn't affect already published blogs (as long as the
  configuration file remains untouched). The doc has been updated to
  reflect the new initial layout.

* **Deprecating py33 gating** Blogstrap's been using Travis CI for
  gating, and sometimes in the past months, they seem to have dropped
  python 3.3 from the default job templates. Note that if you have
  python3.3 and would like to run the tests locally, you can always
  `tox -e py33`.
